(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{213:function(t,a,s){"use strict";s.r(a);var r=s(0),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("算法的本质是寻找规律并实现")]),t._v(" "),s("p",[t._v("如果寻找规律？找出输入和输出的关系，寻找突破口")]),t._v(" "),s("p",[t._v("如何实现？实现是程序+数据结构的结合体")])]),t._v(" "),s("h2",{attrs:{id:"排序算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排序算法"}},[t._v("#")]),t._v(" 排序算法")]),t._v(" "),s("h2",{attrs:{id:"二分查找"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二分查找"}},[t._v("#")]),t._v(" 二分查找")]),t._v(" "),s("h2",{attrs:{id:"哈希算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希算法"}},[t._v("#")]),t._v(" 哈希算法")]),t._v(" "),s("h2",{attrs:{id:"深度和广度优先搜索"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深度和广度优先搜索"}},[t._v("#")]),t._v(" 深度和广度优先搜索")]),t._v(" "),s("h2",{attrs:{id:"贪心算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法"}},[t._v("#")]),t._v(" 贪心算法")]),t._v(" "),s("h2",{attrs:{id:"分治算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分治算法"}},[t._v("#")]),t._v(" 分治算法")]),t._v(" "),s("h2",{attrs:{id:"回溯算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回溯算法"}},[t._v("#")]),t._v(" 回溯算法")]),t._v(" "),s("h2",{attrs:{id:"动态规划"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[t._v("#")]),t._v(" 动态规划")])])}),[],!1,null,null,null);a.default=e.exports}}]);